package main

import (
	"context"
	"log"

	"github.com/skinkvi/money_managment/internal/config"
	"github.com/skinkvi/money_managment/pkg/logger"
)

/*
üè¶ PERSONAL FINANCE TRACKER - –ü–õ–ê–ù –†–ê–ó–†–ê–ë–û–¢–ö–ò
=============================================

–°—Ç–µ–∫: Go (Gin), PostgreSQL, Docker/Docker Compose, Redis
–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: CI/CD (GH Actions), Swagger –¥–ª—è API docs

üìã –≠–¢–ê–ü–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò
=================

üèóÔ∏è –≠–¢–ê–ü 1: –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
------------------------------------------
TODO: ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
  - ‚úÖ cmd/mm/main.go (entry point)
  - config/ (–∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö env)
  - internal/ (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞, handlers, models)
  - migrations/ (SQL –º–∏–≥—Ä–∞—Ü–∏–∏)
  - docs/ (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
  - scripts/ (—Å–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è/—É—Ç–∏–ª–∏—Ç—ã)

TODO: üê≥ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  - docker-compose.yml (PostgreSQL + Redis + –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
  - Dockerfile –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  - .dockerignore
  - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ volumes –¥–ª—è –¥–∞–Ω–Ω—ã—Ö

TODO: ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  - config/config.go - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥–æ–≤
  - config/dev.yaml, config/prod.yaml
  - –ü–∞—Ä—Å–∏–Ω–≥ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

üóÑÔ∏è –≠–¢–ê–ü 2: –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –ú–ò–ì–†–ê–¶–ò–ò
---------------------------------
TODO: üìä –î–∏–∑–∞–π–Ω —Å—Ö–µ–º—ã –ë–î
  - users (id, email, password_hash, created_at, updated_at)
  - accounts (id, user_id, name, type, balance, currency, created_at)
  - categories (id, user_id, name, type, color, icon, created_at)
  - transactions (id, account_id, category_id, amount, description, date, type, created_at)
  - budgets (id, user_id, category_id, amount, period, start_date, end_date)
  - goals (id, user_id, name, target_amount, current_amount, deadline)

TODO: üîÑ –ú–∏–≥—Ä–∞—Ü–∏–∏
  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å golang-migrate –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ
  - migrations/000001_init.up.sql –∏ .down.sql
  - migrations/000002_add_indexes.up.sql –∏ .down.sql
  - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –≤ docker-compose

TODO: üíæ Database layer
  - internal/storage/postgres.go - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
  - internal/models/ - Go structs –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  - internal/repository/ - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sqlx –∏–ª–∏ GORM (–Ω–∞ –≤—ã–±–æ—Ä)

üîê –≠–¢–ê–ü 3: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
-----------------------------------
TODO: üîë JWT Authentication
  - internal/auth/jwt.go - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  - internal/middleware/auth.go - middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
  - Refresh tokens –≤ Redis
  - Password hashing (bcrypt)

TODO: üë§ User management
  - POST /api/v1/auth/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  - POST /api/v1/auth/login - –ª–æ–≥–∏–Ω
  - POST /api/v1/auth/refresh - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  - POST /api/v1/auth/logout - –≤—ã—Ö–æ–¥
  - GET /api/v1/user/profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üì± –≠–¢–ê–ü 4: CORE API - –§–ò–ù–ê–ù–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
----------------------------------------
TODO: üí≥ Accounts API
  - GET /api/v1/accounts - —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  - POST /api/v1/accounts - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç
  - PUT /api/v1/accounts/{id} - –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç
  - DELETE /api/v1/accounts/{id} - —É–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç
  - GET /api/v1/accounts/{id}/balance - –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞

TODO: üè∑Ô∏è Categories API
  - GET /api/v1/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã)
  - POST /api/v1/categories - —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  - PUT /api/v1/categories/{id} - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  - DELETE /api/v1/categories/{id} - —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é

TODO: üí∏ Transactions API
  - GET /api/v1/transactions - —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    * ?account_id=X&category_id=Y&date_from=Z&date_to=W&type=income/expense
  - POST /api/v1/transactions - —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  - PUT /api/v1/transactions/{id} - –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  - DELETE /api/v1/transactions/{id} - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  - GET /api/v1/transactions/{id} - –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

üìä –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´
---------------------------
TODO: üìà Statistics API
  - GET /api/v1/stats/summary - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–∞–ª–∞–Ω—Å, –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥)
  - GET /api/v1/stats/by-category - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  - GET /api/v1/stats/by-month - –ø–æ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  - GET /api/v1/stats/trends - —Ç—Ä–µ–Ω–¥—ã –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤

TODO: üéØ Budgets & Goals API
  - GET /api/v1/budgets - —Å–ø–∏—Å–æ–∫ –±—é–¥–∂–µ—Ç–æ–≤
  - POST /api/v1/budgets - —Å–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç
  - PUT /api/v1/budgets/{id} - –æ–±–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç
  - GET /api/v1/budgets/{id}/status - —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
  - GET /api/v1/goals - —Å–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
  - POST /api/v1/goals - —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
  - PUT /api/v1/goals/{id} - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏

‚ö° –≠–¢–ê–ü 6: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
----------------------------------
TODO: üî• Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  - internal/cache/redis.go - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
  - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–∞–ª–∞–Ω—Å—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
  - Session storage –¥–ª—è JWT refresh tokens
  - Rate limiting –¥–ª—è API endpoints

TODO: ‚ö° Performance optimization
  - –ò–Ω–¥–µ–∫—Å—ã –≤ –ë–î –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  - –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  - Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  - Connection pooling –¥–ª—è –ë–î

üìö –≠–¢–ê–ü 7: –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
------------------------------------
TODO: üìñ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  - swaggo/swag –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ docs
  - –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ handlers
  - GET /swagger/index.html - UI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  - swagger.yaml –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞

TODO: üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  - Unit tests –¥–ª—è business logic
  - Integration tests –¥–ª—è API endpoints
  - –ú–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ë–î, Redis)
  - Test containers –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –ë–î

üöÄ –≠–¢–ê–ü 8: –î–ï–ü–õ–û–ô –ò CI/CD
------------------------
TODO: üîÑ GitHub Actions
  - .github/workflows/test.yml - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  - .github/workflows/build.yml - —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  - .github/workflows/deploy.yml - –¥–µ–ø–ª–æ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  - Linting —Å golangci-lint

TODO: üéØ Production ready
  - Health check endpoints (/health, /ready)
  - Graceful shutdown
  - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (logrus/zap)
  - –ú–µ—Ç—Ä–∏–∫–∏ (prometheus, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  - Environment-specific configs

üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ò–ß–ò (V2.0)
============================
TODO: üì§ Import/Export
  - –ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
  - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ API

TODO: üì± Mobile API –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
  - API versioning
  - Push notifications (Firebase)
  - Offline sync capabilities

TODO: ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
  - Recurring transactions (–ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞—Ä–ø–ª–∞—Ç–∞)
  - Smart categorization (ML –¥–ª—è –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏)
  - Budget alerts –∏ notifications

üõ†Ô∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
==========================
internal/
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ handlers/     # HTTP handlers
‚îÇ   ‚îú‚îÄ‚îÄ middleware/   # Auth, logging, cors middleware
‚îÇ   ‚îî‚îÄ‚îÄ router.go     # Gin router setup
‚îú‚îÄ‚îÄ auth/            # JWT, password hashing
‚îú‚îÄ‚îÄ cache/           # Redis operations
‚îú‚îÄ‚îÄ config/          # Configuration management
‚îú‚îÄ‚îÄ models/          # Data structures
‚îú‚îÄ‚îÄ repository/      # Data access layer
‚îú‚îÄ‚îÄ service/         # Business logic
‚îî‚îÄ‚îÄ storage/         # Database connections

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- Clean Architecture
- Dependency Injection
- Interface segregation
- –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–¥
- Graceful error handling

üéØ ROADMAP
=========
–ù–µ–¥–µ–ª—è 1: –≠—Ç–∞–ø—ã 1-2 (–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –ë–î)
–ù–µ–¥–µ–ª—è 2: –≠—Ç–∞–ø 3 (–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
–ù–µ–¥–µ–ª—è 3: –≠—Ç–∞–ø 4 (Core API)
–ù–µ–¥–µ–ª—è 4: –≠—Ç–∞–ø 5-6 (–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ + –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
–ù–µ–¥–µ–ª—è 5: –≠—Ç–∞–ø—ã 7-8 (–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è + CI/CD)

–£–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üöÄ
*/

func main() {
	cfg, err := config.MustLoadConfig("../../config/dev.yaml")
	if err != nil {
		log.Fatal(err)
	}

	log, err := logger.New(&cfg.Logger)
	if err != nil {
		return
	}

	ctx := context.Background()

	log.Info(ctx, "config load", logger.Field{
		Key:   "cfg",
		Value: cfg,
	})
	// TODO: init database connection
	// TODO: run migrations
	// TODO: init Redis cache
	// TODO: setup Gin router
	// TODO: start HTTP server with graceful shutdown

}
